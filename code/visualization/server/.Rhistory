shiny::runApp()
shiny::runApp()
help("paste")
??paste
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/Dropbox/sv/gene_expression/tmp/plotphewas.R')
plotmain=paste("PheWAS Manhattan Plot for ", gene_info$name, " (on Chr", gene_info$chr, ": ", gene_info$start_pos, " Mb)", sep="")
# make interactive plot by iplot
given_gene_y              <- data_table
given_gene_y$Category_ID  <- as.numeric(given_gene_y$Category_ID); given_gene_y$logp  <- as.numeric(given_gene_y$logp)
p0 <- iplot(x = given_gene_y$Category_ID, y = given_gene_y$logp, group = given_gene_y$color, indID = given_gene_y$Shown_pheno,
chartOpts = list(xlab="Category", xlab = "", xaxt = "n", ylab = "Log(pvalue)", title = plotmain, height = 700, width = 1000, pointcolor = c("#3953A4","#93C83D","#F68C1E","#6FCCDD")))
# make interactive plot by iplot
given_gene_y              <- data_table
given_gene_y$Category_ID  <- as.numeric(given_gene_y$Category_ID); given_gene_y$logp  <- as.numeric(given_gene_y$logp)
p0 <- iplot(x = given_gene_y$Category_ID, y = given_gene_y$logp, group = given_gene_y$color, indID = given_gene_y$Shown_pheno,
chartOpts = list(xlab="Category", xlab = "", xaxt = "n", ylab = "Log(pvalue)", title = plotmain, height = 700, width = 1000, pointcolor = c("#3953A4","#93C83D","#F68C1E","#6FCCDD")))
# make interactive plot by iplot
given_gene_y              <- data_table
given_gene_y$Category_ID  <- as.numeric(given_gene_y$Category_ID); given_gene_y$logp  <- as.numeric(given_gene_y$logp)
p0 <- iplot(x = given_gene_y$Category_ID, y = given_gene_y$logp, group = given_gene_y$color, indID = given_gene_y$Shown_pheno,
chartOpts = list(xlab="Category", xlab = "", xaxt = "n", ylab = "Log(pvalue)", title = plotmain, height = 700, width = 1000, pointcolor = c("#3953A4","#93C83D","#F68C1E","#6FCCDD")))
plotmain=paste("PheWAS Manhattan Plot for ", gene_info$name, " (on Chr", gene_info$chr, ": ", gene_info$start_pos, " Mb)", sep="")
# make interactive plot by iplot
given_gene_y              <- data_table
given_gene_y$Category_ID  <- as.numeric(given_gene_y$Category_ID); given_gene_y$logp  <- as.numeric(given_gene_y$logp)
p0 <- iplot(x = given_gene_y$Category_ID, y = given_gene_y$logp, group = given_gene_y$color, indID = given_gene_y$Shown_pheno,
chartOpts = list(xlab="Category", xlab = "", xaxt = "n", ylab = "Log(pvalue)", title = plotmain, height = 700, width = 1000, pointcolor = c("#3953A4","#93C83D","#F68C1E","#6FCCDD")))
??iplot
group = given_gene_y$color
given_gene_y$Shown_pheno
View(given_gene_y)
shiny::runApp()
shiny::runApp()
###############################################
# 2016-07-18
# Author: Tao Lin
###############################################
# Load package.
library(shiny)
library(qtl)
library(qtlcharts)
library(intermediate)
library(biomaRt)
library(plyr)
library(ggplot2)
library(data.table)
library(shinyjs)
library(shinysky)
library(stringr)
# Given the name of gene, get the information of gene.
get.gene_info <- function(gene_name){
# The format of input: a character string
# The format of output: either NULL/Dataframe(name, chr, start_pos)
if (is.null(gene_name)){
return(NULL)
}
else{
gene_info    <- gene_aligner[GeneName == gene_name]
return(list("name"=as.character(gene_info$GeneName), "chr"=as.numeric(gene_info$chromosome), "pos"=gene_info$start_position))
}
}
# define path
path.in.data <- "/Users/hali/Dropbox/sv/gene_expression/new/data/output"
# path.in.data <- "/datadisk/gene_expression/data/output"
path.in.global <- file.path(path.in.data, "global")
path.in.phewas <- "/Users/hali/Dropbox/sv/gene_expression/new/data/output/phewas/EyeOld_CD"
gene_name <- "Ahr"
file_location <- file.path(path.in.phewas, paste0(gene_name, ".rds"))
# Load dataset
gene_aligner <- readRDS(file.path(path.in.global, "gene_position_aligner.rds"))
gene_aligner <- data.table(gene_aligner)
data_table    <- readRDS(file_location)
gene_info     <- get.gene_info(gene_name)
###############################################
# 2016-07-18
# Author: Tao Lin
###############################################
# Load package.
library(shiny)
library(qtl)
library(qtlcharts)
library(intermediate)
library(biomaRt)
library(plyr)
library(ggplot2)
library(data.table)
library(shinyjs)
library(shinysky)
library(stringr)
# Given the name of gene, get the information of gene.
get.gene_info <- function(gene_name){
# The format of input: a character string
# The format of output: either NULL/Dataframe(name, chr, start_pos)
if (is.null(gene_name)){
return(NULL)
}
else{
gene_info    <- gene_aligner[GeneName == gene_name]
return(list("name"=as.character(gene_info$GeneName), "chr"=as.numeric(gene_info$chromosome), "pos"=gene_info$start_position))
}
}
# define path
path.in.data <- "/Users/hali/Dropbox/sv/gene_expression/new/data/output"
# path.in.data <- "/datadisk/gene_expression/data/output"
path.in.global <- file.path(path.in.data, "global")
path.in.phewas <- "/Users/hali/Dropbox/sv/gene_expression/new/data/output/mediation/EyeOld"
gene_name <- "A330008L17Rik_1457318_at"
file_location <- file.path(path.in.phewas, paste0(gene_name, ".rds"))
# Load dataset
gene_aligner <- readRDS(file.path(path.in.global, "gene_position_aligner.rds"))
gene_aligner <- data.table(gene_aligner)
data_table    <- readRDS(file_location)
gene_info     <- get.gene_info(gene_name)
source('~/Dropbox/sv/gene_expression/tmp/plotmediation.R')
source('~/Dropbox/sv/gene_expression/tmp/plotmediation.R')
source('~/Dropbox/sv/gene_expression/tmp/plotmediation.R')
source('~/Dropbox/sv/gene_expression/tmp/plotmediation.R')
View(data_table)
shiny::runApp()
